import os
import telebot
from PIL import Image
import logging
import random

logging.basicConfig(level=logging.INFO,
                    filename="bot.log",
                    format='%(asctime)s %(levelname)s: %(message)s')

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = telebot.TeleBot(TELEGRAM_TOKEN)

mom = ['–ú–∞–º–µ 1.png', "–ú–∞–º–µ 2.png"]
grandmom = [
    '–ë–∞–±—É—à–∫–∞ 1.png',
    '–ë–∞–±—É—à–∫–µ 2.png',
]
collega = [
    '–ö–æ–ª–ª–µ–≥–µ 1.png',
    '–ö–æ–ª–ª–µ–≥–µ 2.png',
]
love = [
    '–õ—é–±–∏–º–æ–π 1.png',
    '–õ—é–±–∏–º–æ–π 2.png',
]
sister = [
    "–°–µ—Å—Ç—Ä–µ 1.png",
    '–°–µ—Å—Ç—Ä–µ 2.png',
]
daughter = [
    "–î–æ—á–∫–µ 1.png",
    '–î–æ—á–∫–µ 2.png',
]
Friend = [
    "–ü–æ–¥—Ä—É–≥–µ 1.png",
    '–ü–æ–¥—Ä—É–≥–µ 2.png',
]
me = [
    "–°–µ–±–µ 1.png",
    '–°–µ–±–µ 2.png',
]

button_text = {
    'mom': '–ú–∞–º–µ üíù',
    'grandmom': '–ë–∞–±—É—à–∫–µ üëµüèº',
    'colleague': '–ö–æ–ª–ª–µ–≥–µ üë©‚Äçüíº',
    "love": "–õ—é–±–∏–º–æ–π üë©‚Äç‚ù§‚Äçüë®",
    "sister": "–°–µ—Å—Ç—Ä–µ üëØ‚Äç‚ôÄ",
    "daughter": "–î–æ—á–∫–µ üëßüèº",
    "Friend": "–ü–æ–¥—Ä—É–≥–µüíÉ",
    "me": "–°–µ–±–µ üßö‚Äç‚ôÄ",
}


@bot.message_handler(commands=['start'])
def start_handler(message):
    """–õ–æ–≤–∏–º /start"""
    chat_id = message.chat.id
    bot.send_message(
        chat_id,
        '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ñ–æ—Ç–æ–±–æ—Ç COFFEE LIKE, –∏ –æ–Ω –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –æ—á–µ–Ω—å –¥—É—à–µ–≤–Ω—ã–µ –∏ –ø—Ä–∏—è—Ç–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö. üíö –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—É—á–∏—Ç—Å—è –º–∏–ª–∞—è –æ—Ç–∫—Ä—ã—Ç–æ—á–∫–∞.'
    )
    logging.info(f"–ü–æ–ª—å–∑–∞–≤–æ—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    start(message)


def start(message, retry=False):
    """–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    chat_id = message.chat.id
    username = message.from_user.username
    markup = telebot.types.InlineKeyboardMarkup()
    btn1 = telebot.types.InlineKeyboardButton(text='–ú–∞–º–µ üíù',
                                              callback_data='mom')
    btn2 = telebot.types.InlineKeyboardButton(text='–ë–∞–±—É—à–∫–µ üëµüèº',
                                              callback_data='grandmom')
    btn3 = telebot.types.InlineKeyboardButton(text='–ö–æ–ª–ª–µ–≥–µ üë©‚Äçüíº',
                                              callback_data='colleague')
    btn4 = telebot.types.InlineKeyboardButton(text='–õ—é–±–∏–º–æ–π üë©‚Äç‚ù§‚Äçüë®',
                                              callback_data='love')
    btn5 = telebot.types.InlineKeyboardButton(text='–°–µ—Å—Ç—Ä–µ üëØ‚Äç‚ôÄ',
                                              callback_data='sister')
    btn6 = telebot.types.InlineKeyboardButton(text='–î–æ—á–∫–µ üëßüèº',
                                              callback_data='daughter')
    btn7 = telebot.types.InlineKeyboardButton(text='–ü–æ–¥—Ä—É–≥–µüíÉ',
                                              callback_data='Friend')
    btn8 = telebot.types.InlineKeyboardButton(text='–°–µ–±–µ üßö‚Äç‚ôÄ',
                                              callback_data='me')
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8)
    if retry == False:
        bot.send_message(
            chat_id,
            '–£–∫–∞–∂–∏, –¥–ª—è –∫–æ–≥–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É:',
            reply_markup=markup,
        )
    else:
        bot.send_message(chat_id, '–ï—â–µ —Ä–∞–∑–æ–∫?', reply_markup=markup)
    logging.info(
        f"–ü–æ–ª—å–∑–∞–≤–æ—Ç–µ–ª—å:{username} ID: {chat_id} –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–º—É —Å–¥–µ–ª–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É"
    )


@bot.callback_query_handler(func=lambda call: True)
def Frames(call):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∂–¥–µ—Ç –ø–æ–∫–∞ –ø–æ–ª—å–∑–∞–≤–æ—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç —Å–≤–æ—é —Ñ–æ—Ç–∫—É"""
    original_text = call.message.text
    chat_id = call.message.chat.id
    bot.answer_callback_query(call.id,
                              text="–í—ã–±—Ä–∞–Ω–æ: " + button_text[call.data])
    if call.data == "me":
        bot.send_message(
            chat_id,
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {button_text[call.data]}. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ.')
    else:
        bot.send_message(
            chat_id,
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {button_text[call.data]}. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—ë —Ñ–æ—Ç–æ (–ª—É—á—à–µ –ø–æ—Ä—Ç—Ä–µ—Ç)'
        )
    bot.edit_message_text(chat_id=chat_id,
                          message_id=call.message.message_id,
                          text=original_text,
                          reply_markup=None)
    bot.register_next_step_handler(
        call.message, lambda message: choice_user(message, call.data))
    logging.info(f"–õ–æ–≤–∏–º –∫–Ω–æ–ø–∫—É {chat_id}")


def choice_user(message, call):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–∞–≤–æ—Ç–µ–ª—å"""
    chat_id = message.chat.id
    username = message.from_user.username
    choices = {
        'mom': mom,
        'grandmom': grandmom,
        'colleague': collega,
        'love': love,
        'sister': sister,
        'daughter': daughter,
        'Friend': Friend,
        'me': me
    }
    if call in choices:
        choice = random.choice(choices[call])
        frame = Image.open(choice).convert('RGBA')
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:{username} ID: {chat_id} –≤—ã–±—Ä–∞–ª {call} ")
        save_and_combine_photo(message, frame)


def save_and_combine_photo(message, frame):
    """–ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Ñ–æ—Ç–æ –∏ —Ä–∞–º–∫–∏"""
    chat_id = message.chat.id
    username = message.from_user.username
    try:
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        file_name = f"{chat_id}_{file_id}.jpg"
        if not os.path.exists('photos'):
            os.makedirs('photos')
        file = bot.download_file(file_path)
        with open(f"photos/{file_name}", 'wb') as f:
            f.write(file)
        bot.send_message(chat_id, "–í–∂—É—Ö –≤–∂—É—Ö, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ü™Ñ ")
        # –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–º–∫–∏ –∏ —Ñ–æ—Ç–æ
        photo = Image.open(f"photos/{file_name}").convert('RGBA')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω —Ñ–æ—Ç–æ –∏ —Ä–∞–º–∫–∏
        # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω —Ä–∞–º–∫–∏ –∏ —Ñ–æ—Ç–æ
        frame_ratio = frame.width / frame.height
        photo_ratio = photo.width / photo.height
        # –æ–±—Ä–µ–∑–∫–∞ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–∞–º–∫–æ–π
        if frame_ratio != photo_ratio:
            if frame_ratio > photo_ratio:
                new_height = int(photo.width / frame_ratio)
                diff = (photo.height - new_height) // 2
                photo = photo.crop((0, diff, photo.width, diff + new_height))
            else:
                new_width = int(photo.height * frame_ratio)
                diff = (photo.width - new_width) // 2
                photo = photo.crop((diff, 0, diff + new_width, photo.height))
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Ä–∞–º–∫–∏ –¥–æ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–æ—Ç–æ
        frame = frame.resize(photo.size)
        logging.info(f"–î–µ–ª–∞–µ–º resize –¥–ª—è :{username} ID: {chat_id}")
        # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
        photo = Image.alpha_composite(photo, frame)
        logging.info(f"–û–±—å–µ–¥–∏–Ω—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è :{username} ID: {chat_id}")
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        combined_path = f"Final/{file_name}"
        photo.save(combined_path, format='PNG')
        logging.info(f"–°–æ—Ö—Ä–æ–Ω—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è :{username} ID: {chat_id}")
        with open(combined_path, "rb") as f:
            bot.send_photo(chat_id, f)
        os.remove(f"photos/{file_name}")
        os.remove(combined_path)
        logging.info(f"–£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ :{username} ID: {chat_id}")
        start(message, retry=True)
        bot.send_message(chat_id,
                         '–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã—Ç–∫—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥—Ä–µ—Å–∞—Ç—É üëç')
        bot.send_message(
            chat_id,
            '–ë—É–¥–µ—Ç –µ—â–µ –∫—Ä—É—á–µ, –µ—Å–ª–∏ —Ç—ã –ø–æ–¥–µ–ª–∏—à—å—Å—è —ç—Ç–æ–π –æ—Ç–∫—Ä—ã—Ç–∫–æ–π –≤ —Å—Ç–æ—Ä–∏–∑ Instagram –∏–ª–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏ –æ—Ç–º–µ—Ç–∏—à—å –Ω–∞—Å @coffeelike_com üòª'
        )
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–∞–≤–æ—Ç–µ–ª—é  {chat_id}")
    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑ ")
        logging.critical('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s', e)
        start(message)
        return


def check_tokens():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    token = ("TELEGRAM_TOKEN")
    logging.info("Check Token")
    for token_name in token:
        if globals()[token_name] is None:
            return None
        return all([token_name])


bot.polling(none_stop=True, interval=0)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    if not check_tokens():
        logging.critical('Empty token')
        raise KeyError('Empty token')
    telebot.TeleBot(TELEGRAM_TOKEN)


if __name__ == '__main__':
    main()
